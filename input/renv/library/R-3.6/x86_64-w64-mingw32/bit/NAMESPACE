# Generated by roxygen2: do not edit by hand

S3method("!",bit)
S3method("!",bitwhich)
S3method("!=",bit)
S3method("!=",bitwhich)
S3method("!=",booltype)
S3method("&",bit)
S3method("&",bitwhich)
S3method("&",booltype)
S3method("==",bit)
S3method("==",bitwhich)
S3method("==",booltype)
S3method("[",bit)
S3method("[",bitwhich)
S3method("[<-",bit)
S3method("[<-",bitwhich)
S3method("[[",bit)
S3method("[[",bitwhich)
S3method("[[<-",bit)
S3method("[[<-",bitwhich)
S3method("length<-",bit)
S3method("length<-",bitwhich)
S3method("physical<-",default)
S3method("virtual<-",default)
S3method("|",bit)
S3method("|",bitwhich)
S3method("|",booltype)
S3method(all,bit)
S3method(all,bitwhich)
S3method(all,booltype)
S3method(all,ri)
S3method(all,which)
S3method(any,bit)
S3method(any,bitwhich)
S3method(any,booltype)
S3method(any,ri)
S3method(any,which)
S3method(anyDuplicated,rlepack)
S3method(anyNA,bit)
S3method(anyNA,bitwhich)
S3method(anyNA,booltype)
S3method(anyNA,ri)
S3method(anyNA,which)
S3method(as.bit,"NULL")
S3method(as.bit,bit)
S3method(as.bit,bitwhich)
S3method(as.bit,double)
S3method(as.bit,integer)
S3method(as.bit,logical)
S3method(as.bit,ri)
S3method(as.bit,which)
S3method(as.bitwhich,"NULL")
S3method(as.bitwhich,bit)
S3method(as.bitwhich,bitwhich)
S3method(as.bitwhich,double)
S3method(as.bitwhich,integer)
S3method(as.bitwhich,logical)
S3method(as.bitwhich,ri)
S3method(as.bitwhich,which)
S3method(as.booltype,default)
S3method(as.character,bit)
S3method(as.character,bitwhich)
S3method(as.double,bit)
S3method(as.double,bitwhich)
S3method(as.double,ri)
S3method(as.integer,bit)
S3method(as.integer,bitwhich)
S3method(as.integer,ri)
S3method(as.logical,bit)
S3method(as.logical,bitwhich)
S3method(as.logical,ri)
S3method(as.logical,which)
S3method(as.ri,default)
S3method(as.ri,ri)
S3method(as.which,"NULL")
S3method(as.which,bit)
S3method(as.which,bitwhich)
S3method(as.which,integer)
S3method(as.which,logical)
S3method(as.which,numeric)
S3method(as.which,ri)
S3method(as.which,which)
S3method(c,bit)
S3method(c,bitwhich)
S3method(c,booltype)
S3method(chunk,default)
S3method(clone,default)
S3method(is.na,bitwhich)
S3method(length,bit)
S3method(length,bitwhich)
S3method(length,ri)
S3method(max,bit)
S3method(max,bitwhich)
S3method(max,booltype)
S3method(max,ri)
S3method(max,which)
S3method(maxindex,bit)
S3method(maxindex,bitwhich)
S3method(maxindex,default)
S3method(maxindex,logical)
S3method(maxindex,ri)
S3method(maxindex,which)
S3method(min,bit)
S3method(min,bitwhich)
S3method(min,booltype)
S3method(min,ri)
S3method(min,which)
S3method(physical,default)
S3method(poslength,bit)
S3method(poslength,bitwhich)
S3method(poslength,default)
S3method(poslength,logical)
S3method(poslength,ri)
S3method(poslength,which)
S3method(print,bit)
S3method(print,bitwhich)
S3method(print,physical)
S3method(print,ri)
S3method(print,virtual)
S3method(range,bit)
S3method(range,bitwhich)
S3method(range,booltype)
S3method(range,ri)
S3method(range,which)
S3method(rep,bit)
S3method(rep,bitwhich)
S3method(rev,bit)
S3method(rev,bitwhich)
S3method(rev,rlepack)
S3method(rlepack,integer)
S3method(rleunpack,rlepack)
S3method(str,bit)
S3method(str,bitwhich)
S3method(sum,bit)
S3method(sum,bitwhich)
S3method(sum,booltype)
S3method(sum,ri)
S3method(sum,which)
S3method(summary,bit)
S3method(summary,bitwhich)
S3method(summary,booltype)
S3method(summary,ri)
S3method(summary,which)
S3method(unique,rlepack)
S3method(virtual,default)
S3method(xor,bit)
S3method(xor,bitwhich)
S3method(xor,booltype)
S3method(xor,default)
S3method(xor,logical)
export("!=.booltype")
export("&.booltype")
export("==.booltype")
export("is.sorted<-")
export("na.count<-")
export("nties<-")
export("nunique<-")
export("physical<-")
export("repfromto<-")
export("virtual<-")
export("|.booltype")
export(.BITS)
export(all.booltype)
export(any.booltype)
export(anyNA.booltype)
export(as.bit)
export(as.bitwhich)
export(as.booltype)
export(as.ri)
export(as.which)
export(bbatch)
export(bit)
export(bit_anyDuplicated)
export(bit_done)
export(bit_duplicated)
export(bit_in)
export(bit_init)
export(bit_intersect)
export(bit_rangediff)
export(bit_setdiff)
export(bit_setequal)
export(bit_sort)
export(bit_sort_unique)
export(bit_sumDuplicated)
export(bit_symdiff)
export(bit_union)
export(bit_unique)
export(bitsort)
export(bitwhich)
export(bitwhich_representation)
export(booltype)
export(booltypes)
export(c.booltype)
export(chunk)
export(chunks)
export(clone)
export(copy_vector)
export(countsort)
export(firstNA)
export(get_length)
export(getsetattr)
export(in.bitwhich)
export(intisasc)
export(intisdesc)
export(intrle)
export(is.bit)
export(is.bitwhich)
export(is.booltype)
export(is.hi)
export(is.ri)
export(is.sorted)
export(is.which)
export(keyorder)
export(keysort)
export(keysortorder)
export(max.booltype)
export(maxindex)
export(merge_anyDuplicated)
export(merge_duplicated)
export(merge_first)
export(merge_firstin)
export(merge_firstnotin)
export(merge_in)
export(merge_intersect)
export(merge_last)
export(merge_lastin)
export(merge_lastnotin)
export(merge_match)
export(merge_notin)
export(merge_rangediff)
export(merge_rangein)
export(merge_rangenotin)
export(merge_rangesect)
export(merge_rev)
export(merge_setdiff)
export(merge_setequal)
export(merge_sumDuplicated)
export(merge_symdiff)
export(merge_union)
export(merge_unique)
export(mergeorder)
export(mergesort)
export(mergesortorder)
export(min.booltype)
export(na.count)
export(nties)
export(nunique)
export(nvalid)
export(physical)
export(poslength)
export(quickorder)
export(quicksort)
export(quicksort2)
export(quicksort3)
export(quicksortorder)
export(radixorder)
export(radixsort)
export(radixsortorder)
export(ramorder)
export(ramsort)
export(ramsortorder)
export(range.booltype)
export(range_na)
export(range_nanozero)
export(range_sortna)
export(repeat.time)
export(repfromto)
export(reverse_vector)
export(ri)
export(rlepack)
export(rleunpack)
export(setattr)
export(setattributes)
export(shellorder)
export(shellsort)
export(shellsortorder)
export(still.identical)
export(sum.booltype)
export(summary.booltype)
export(symdiff)
export(unattr)
export(vecseq)
export(virtual)
export(xor)
export(xor.booltype)
importFrom(utils,packageDescription)
importFrom(utils,strOptions)
useDynLib(bit, .registration = TRUE, .fixes = "C_")
